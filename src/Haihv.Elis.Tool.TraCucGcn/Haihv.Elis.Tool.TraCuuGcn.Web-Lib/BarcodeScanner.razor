@inject IJSRuntime Js
@using Microsoft.JSInterop
@implements IDisposable

@if (string.IsNullOrEmpty(ErrorMessage))
{
    <div style="position: relative;">
        <MudFab Class="close-button" Color="Color.Default" StartIcon="@Icons.Material.Filled.Close" Size="Size.Small"
            Label="Đóng Camera" OnClick="StopScanning" />
        <div id="barcode-reader"></div>
    </div>
}
else
{
    <MudStack Row=true>
        <MudAlert Severity="Severity.Error" Dense="true">@ErrorMessage</MudAlert>
        <MudFab Color="Color.Default" StartIcon="@Icons.Material.Filled.Close" Size="Size.Small" DropShadow="false"
            Label="Đóng" OnClick="StopScanning" />
    </MudStack>
}

<script src="./_content/Haihv.Elis.Tool.TraCuuGcn.Web-Lib/js/giayChungNhanMaVach.js?v=1.1.0"></script>
<style>
    #barcode-reader {
        width: 100%;
        /* Chiều rộng luôn chiếm 100% của container */
        height: auto;
        /* Chiều cao tự động điều chỉnh để giữ nguyên tỷ lệ khung hình */
        max-height: 100vh;
        /* Đảm bảo không vượt quá chiều cao của cửa sổ trình duyệt */
        background-color: #000;
        /* Màu nền đen khi không có video */
        object-fit: cover;
        /* Đảm bảo video bao phủ toàn bộ khu vực hiển thị */
        position: relative;
        overflow: hidden;
        /* Đảm bảo không có nội dung nào tràn ra ngoài */
    }

    .close-button {
        position: absolute;
        top: 5px;
        right: 5px;
        z-index: 1000;
    }
</style>
@code {
    [Parameter] public EventCallback<string> OnBarcodeScanned { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string? ErrorMessage { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("startBarcodeScanner", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task ReceiveBarcode(string barcode)
    {
        await OnBarcodeScanned.InvokeAsync(barcode);
        await StopScanning();
    }

    [JSInvokable]
    public void HandleError(string error)
    {
        ErrorMessage = $"Không truy cập được Camera: {error}";
        StateHasChanged(); // Cập nhật giao diện để hiển thị lỗi
    }

    private async Task StopScanning()
    {
        await Js.InvokeVoidAsync("stopBarcodeScanner");
        await OnClose.InvokeAsync();
    }
    public void Dispose()
    {
        _ = Js.InvokeVoidAsync("stopBarcodeScanner");
        _ = Js.InvokeVoidAsync("destroyBarcodeScanner");
    }
}