@using System.Text.Json
@using System.Text.Json.Serialization
@using Haihv.Elis.Tool.ChuyenDvhc.Data
@using Haihv.Elis.Tool.ChuyenDvhc.Extensions
@using Haihv.Elis.Tool.ChuyenDvhc.Services
@using Haihv.Elis.Tool.ChuyenDvhc.Settings
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory

@inject IMemoryCache MemoryCache
@inject IFileService FileService

<MudStack>
    <MudTextField @bind-Value="_serverAddress"
                     Label="Máy chủ cơ sở dữ liệu ELIS SQL" 
                     FullWidth="true">
    </MudTextField>
    <MudTextField @bind-Value="_databaseName"
                     Label="Tên cơ sở dữ liệu"
                     FullWidth="true">
        
    </MudTextField>
    <MudTextField @bind-Value="_userName"
                     Label="Tên đăng nhập" 
                     FullWidth="true">
    </MudTextField>
    <MudTextField @bind-Value="_password"
                     Label="Mật khẩu"
                     InputType="InputType.Password"
                     FullWidth="true">
    </MudTextField>
    <MudCheckBox @bind-Value="_trustedConnection"
                 Dense="true"
                 Label="Sử dụng kết nối an toàn"/>
    <MudButton Disabled="@_processing" OnClick="StartCheckConnectionAsync" Variant="Variant.Filled" Color="Color.Primary">
        @if (_processing)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
            <MudText Class="ms-2">Đang kiểm tra</MudText>
        }
        else
        {
            <MudText>Kiểm tra kết nối</MudText>
        }
    </MudButton>
    @if (_finishChecking)
    {
        <MudAlert Severity="@(IsConnected ? Severity.Success : Severity.Error)" 
                  Dense="true">
            @if (IsConnected)
            {
                <span>Kết nối thành công</span>
            }
            else
            {
                <a>Kết nối thất bại</a>
                <br/>
                <a>@_errorMessage</a>
            }
        </MudAlert>
        @if(IsConnected)
        {
            if (!string.IsNullOrWhiteSpace(_errorWriteFile))
            {
                <MudAlert Severity="Severity.Warning"
                          Dense="true">
                    @_errorWriteFile
                </MudAlert>
            }
            <MudAlert Severity="Severity.Warning" 
                      Dense="true">
                Vui lòng sao lưu dữ liệu trước khi thực hiện các bước tiếp theo!
            </MudAlert>
        }
        @if(!string.IsNullOrWhiteSpace(_errorMessage))
        {
            <MudAlert Severity="Severity.Warning" 
                      Dense="true">
                @_errorMessage
            </MudAlert>
        }
    }
    else
    {
        <MudAlert Severity="Severity.Info" 
                  Dense="true">
            Vui lòng thực hiện kiểm tra kết nối trước khi tiếp tục!
        </MudAlert>
    }

</MudStack>

@code {
    bool _processing = false;
    bool _finishChecking = false;
    string _serverAddress = string.Empty;
    string _databaseName = string.Empty;
    string _userName = string.Empty;
    string _password = string.Empty;
    [Parameter]
    public bool IsConnected { get; set; }

    [Parameter]
    public EventCallback<bool> IsConnectedChanged { get; set; }

    private readonly string _filePath = FilePath.PathConnectionString;
    bool _trustedConnection = true;
    string _errorMessage = string.Empty;
    string _errorWriteFile = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadConnectionInfoAsync();
        await base.OnInitializedAsync();
    }

    async Task StartCheckConnectionAsync()
    {
        _processing = true;
        StateHasChanged();
        var connectionString  = $"Server={_serverAddress};" +
                                $"Database={_databaseName};" +
                                $"User Id={_userName};" +
                                $"Password={_password};" +
                                $"TrustServerCertificate={_trustedConnection};";
        try
        {
            await using var context = new ElisDataContext(connectionString);
            await context.Database.OpenConnectionAsync();
            MemoryCache.Set(CacheDataConnection.ConnectionString, connectionString);
            IsConnected = true;
            _errorMessage = string.Empty;
            await SaveConnectionInfoAsync();
        }
        catch (Exception ex)
        {
            IsConnected = false;
            Console.WriteLine(ex);
            _errorMessage = ex.Message;
        }
        finally
        {
            await IsConnectedChanged.InvokeAsync(IsConnected);
            _processing = false;
            _finishChecking = true;
        }
    }
    
    private class DataConnectionModel
    {
        [JsonPropertyName("serverAddress")]
        public string ServerAddress { get; set; } = "localhost";
        [JsonPropertyName("databaseName")]
        public string DatabaseName { get; set; } = "elis";
        [JsonPropertyName("userName")]
        public string UserName { get; set; } = "sa";
        [JsonPropertyName("password")]
        public string Password { get; set; } = "";

        [JsonPropertyName("trustedConnection")]
        public bool TrustedConnection { get; set; } = true;
    }

    private async Task LoadConnectionInfoAsync()
    {
        try
        {
            var json = await FileService.ReadFileAsync(_filePath);
            var jsonDecrypted = json.Decrypt();
            var connectionInfo = JsonSerializer.Deserialize<DataConnectionModel>(jsonDecrypted);
            if (connectionInfo != null)
            {
                _serverAddress = connectionInfo.ServerAddress;
                _databaseName = connectionInfo.DatabaseName;
                _userName = connectionInfo.UserName;
                _password = connectionInfo.Password;
                _trustedConnection = connectionInfo.TrustedConnection;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading connection info: {ex.Message}");
            var connectionInfo = new DataConnectionModel();
            _serverAddress = connectionInfo.ServerAddress;
            _databaseName = connectionInfo.DatabaseName;
            _userName = connectionInfo.UserName;
            _password = connectionInfo.Password;
            _trustedConnection = connectionInfo.TrustedConnection;
        }
    }
    
    private async Task SaveConnectionInfoAsync()
    {
        try
        {
            var connectionInfo = new DataConnectionModel
            {
                ServerAddress = _serverAddress,
                DatabaseName = _databaseName,
                UserName = _userName,
                Password = _password,
                TrustedConnection = _trustedConnection
            };
            var json = JsonSerializer.Serialize(connectionInfo).Encrypt();
            await FileService.WriteFileAsync(_filePath, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            _errorWriteFile = $"Lỗi khi lưu thông tin kết nối: {ex.Message}";
        }
    }
}

