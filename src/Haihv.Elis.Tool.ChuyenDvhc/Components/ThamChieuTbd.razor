@using Haihv.Elis.Tool.ChuyenDvhc.Data
@using Haihv.Elis.Tool.ChuyenDvhc.Data.Entities
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory

<MudExpansionPanel Expanded="true" Dense="true"> 
    <TitleContent>
        <MudStack Row="true" Justify="Justify.SpaceBetween">
            <MudText Typo="Typo.subtitle2">
                Tờ bản đồ
            </MudText>
            <MudStack Row="true" Class="mr-3">
                @if(DvhcTruocs != null && DvhcTruocs.Any() && DvhcSau != null)
                {
                    @* <MudSwitch @bind-Value="_readOnly" Color="Color.Primary">Chỉ xem</MudSwitch> *@
                    <MudButton Disabled="@_loadingToBanDos" OnClick="LoadBanDoFromDataAsync" Variant="Variant.Filled" Color="Color.Primary">
                        @if (_loadingToBanDos)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Đang thực hiện</MudText>
                        }
                        else
                        {
                            <MudText>Làm mới</MudText>
                        }
                    </MudButton>
                }
            </MudStack>
        </MudStack>
    </TitleContent>
    <ChildContent>
        <MudDataGrid Class="mb-3" Items="_thamChieuToBanDos"
                     Dense="true"
                     Groupable="true"
                     Filterable="true"
                     FilterMode="DataGridFilterMode.Simple"
                     GroupExpanded="true"
                     MultiSelection="true"
                     SelectOnRowClick="true"
                     FilterCaseSensitivity="DataGridFilterCaseSensitivity.Default">
            <Columns>
                <SelectColumn T="ThamChieuToBanDo"/>
                <PropertyColumn Property="t => t.Id" Title="STT"/>
                <PropertyColumn Property="t => t.TenDvhcTruoc" Title="Đơn vị hành chính trước" Grouping/>
                <PropertyColumn Property="t => t.SoToBanDoTruoc" Title="Số tờ trước"/>
                <PropertyColumn Property="t => t.TenDvhcSau" Title="Đơn vị hành chính sau"/>
                <PropertyColumn Property="t => t.SoToBanDoSau" Title="Số tờ sau"/>
            </Columns>
        </MudDataGrid>
    </ChildContent>
</MudExpansionPanel>
@code {
    [Inject]
    IMemoryCache Cache { get; set; } = null!;
    [Parameter]
    public IEnumerable<DvhcRecord>? DvhcTruocs { get; set; }
    [Parameter]
    public DvhcRecord? DvhcSau { get; set; }
    [Parameter]
    public string? TenDvhcSau { get; set; }
    private List<ThamChieuToBanDo> _thamChieuToBanDos = [];
    //private bool _readOnly = false;
    private bool _loadingToBanDos = false;

    private async Task LoadBanDoFromDataAsync(MouseEventArgs arg)
    {
        try
        {
            if(DvhcTruocs == null || !DvhcTruocs.Any() || DvhcSau == null)
            {
                return;
            }
            _loadingToBanDos = true;
            var connectionString = Cache.Get(Settings.KeyConnectionString)?.ToString();
            if (string.IsNullOrWhiteSpace(connectionString))
            {
                return;
            }
            var dbConText = new ElisDataContext(connectionString);
            var tbds = await dbConText.ToBanDos
                .Where(tbd => tbd.MaDvhc == DvhcSau.MaDvhc)
                .OrderBy(tbd => tbd.TyLe)
                .ToListAsync();
            _thamChieuToBanDos = [];
            var stt = 0;
            _thamChieuToBanDos.AddRange(tbds.Select(tbd => new ThamChieuToBanDo
            {
                Id = stt++,
                TenDvhcTruoc = DvhcSau.Ten,
                MaDvhcTruoc = DvhcSau.MaDvhc,
                TenDvhcSau = TenDvhcSau?? DvhcSau.Ten,
                MaDvhcSau = DvhcSau.MaDvhc,
                SoToBanDoTruoc = $"{tbd.SoTo} [{tbd.TyLe}]",
                SoToBanDoSau = tbd.SoTo
            }));
            var soToBanDoTiepTheo = tbds.Where(t => int.TryParse(t.SoTo, out _)).Select(t => int.Parse(t.SoTo)).Max();
            var maDvhcTruocs = DvhcTruocs
                .Where(d => d.MaDvhc != DvhcSau.MaDvhc)
                .Select(d => d.MaDvhc)
                .ToList();
            foreach (var maDvhc in maDvhcTruocs)
            {
                var tenDvhc = DvhcTruocs.First(d => d.MaDvhc == maDvhc).Ten;
                tbds = await dbConText.ToBanDos
                    .Where(tbd => tbd.MaDvhc == maDvhc)
                    .OrderBy(tbd => tbd.TyLe)
                    .ToListAsync();
                _thamChieuToBanDos.AddRange(tbds.Select(tbd => new ThamChieuToBanDo
                {
                    Id = stt++,
                    TenDvhcTruoc = tenDvhc,
                    MaDvhcTruoc = maDvhc,
                    MaToBanDoTruoc = tbd.MaToBanDo,
                    SoToBanDoTruoc = $"{tbd.SoTo} [{tbd.TyLe}]",
                    TenDvhcSau = TenDvhcSau?? DvhcSau.Ten,
                    MaDvhcSau = DvhcSau.MaDvhc,
                    SoToBanDoSau = soToBanDoTiepTheo++.ToString()
                }));
            }
            SetCache();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            _loadingToBanDos = false;
        }
    }
    
    private void SetCache()
    {
        Cache.Set(Settings.KeyThamChieuToBanDo, _thamChieuToBanDos);
    }
}